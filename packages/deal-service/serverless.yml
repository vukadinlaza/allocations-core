org: allocations
app: automations
service: deal-service
frameworkVersion: "2"

plugins:
  - serverless-plugin-monorepo
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - "@allocations/serverless-allocations-redtail"

custom:
  redtail:
    config: ${file(./redtail.json)}
  serverless-offline:
    httpPort: 8000
    APP_SECRET: ${APP_SECRET}
    ALLOCATIONS_TOKEN: ${ALLOCATIONS_TOKEN}
    ALLOCATIONS_DEAL_SERVICE: ${ALLOCATIONS_DEAL_SERVICE}
  prune:
    automatic: true
    number: 3

provider:
  name: aws
  endpointType: PRIVATE
  vpcEndpointIds:
    - vpce-0cc4064fecca36cab
  vpc:
    securityGroupIds:
      - sg-0245432c2213eeeb8
      - sg-0665e26c1dc22d6dd
    subnetIds:
      - subnet-016539b44e6b89113
      - subnet-01a39dab42b630de6
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 512
  environment:
    APP_SECRET: ${param:APP_SECRET}
    MONGO_URL: ${param:MONGO_URL}
    MONGO_DB: ${param:MONGO_DB}
    DOCUMENTS_BUCKET: ${param:DOCUMENTS_BUCKET}
    DOCSPRING_TOKEN: ${param:DOCSPRING_TOKEN}
    DOCSPRING_TOKEN_ID: ${param:DOCSPRING_TOKEN_ID}
    DOCSPRING_TOKEN_SECRET: ${param:DOCSPRING_TOKEN_SECRET}
    DOCSPRING_INV_SUB_AGREEMENT_FOLDER_ID: ${param:DOCSPRING_INV_SUB_AGREEMENT_FOLDER_ID}
    ZAPIER_CREATE_RUN_HOOK: ${param:ZAPIER_CREATE_RUN_HOOK}
    ZAPIER_FM_SUB_AGREEMENT_SIGNED_HOOK: ${param:ZAPIER_FM_SUB_AGREEMENT_SIGNED_HOOK}
    HUBSPOT_API_KEY: ${param:HUBSPOT_API_KEY}
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*
        Condition:
          StringEquals:
            aws:SourceVpc: vpc-0d05ab0d45d1ddbd5
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        ["s3:GetObject", "s3:PutObject", "s3:ListBucket", "s3:DeleteObject"]
      Resource:
        - "arn:aws:s3:::allocations-deal-documents-${opt:stage, 'dev'}/*"
        - "arn:aws:s3:::organization-documents-${opt:stage, 'dev'}/*"
        - "arn:aws:s3:::allocations-investment-agreements-${opt:stage, 'dev'}/*"

functions:
  initialize:
    handler: service/initialize.handler
    events:
      - http:
          path: initialize
          method: POST

  transition:
    handler: service/transition.handler
    events:
      - sqs:
          arn: !GetAtt transitionQueue.Arn

  buildDocumentUpload:
    handler: service/document-upload.handler
    events:
      - s3:
          bucket: allocations-deal-documents-${opt:stage, 'dev'}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: deal/

  buildDocumentUploadMoU:
    handler: service/document-upload.handler
    events:
      - s3:
          bucket: organization-documents-${opt:stage, 'dev'}
          event: s3:ObjectCreated:*
          existing: true

  processStreetTask:
    handler: service/process-street-task.handler
    events:
      - http:
          path: process-street-task
          method: POST

  processStreetChecklist:
    handler: service/process-street-checklist.handler
    events:
      - http:
          path: process-street-checklist
          method: POST

  # ------------------------------------------------ BUILD FUNCTIONS ----------------------------------------------------------

  buildCheck:
    handler: service/build/check.handler
    events:
      - sns:
          arn: ${redtail:service_topic}
          topicName: deals
          filterPolicy:
            event: [check]
            phase: [build]

  # ------------------------------------------------ POST-BUILD FUNCTIONS ----------------------------------------------------------

  processStreetRun:
    handler: service/post-build/process-street-run.handler
    events:
      - http:
          path: process-street-run
          method: POST

  postBuildCheck:
    handler: service/post-build/check.handler
    events:
      - sns:
          arn: ${redtail:service_topic}
          topicName: deals
          filterPolicy:
            event: [check]
            phase: [post-build]

  # ------------------------------------------------ PRE-ONBOARDING FUNCTIONS ----------------------------------------------------------

  preOnboardingCheck:
    handler: service/pre-onboarding/check.handler
    events:
      - sns:
          arn: ${redtail:service_topic}
          topicName: deals
          filterPolicy:
            event: [check]
            phase: [pre-onboarding]

  preOnboardingAgreementSigned:
    handler: service/pre-onboarding/investment-agreement-signed.handler
    events:
      - http:
          path: sign-investment-agreement
          method: POST

  preOnboardingSubscriptionAgreementSigned:
    handler: service/pre-onboarding/subscription-agreement-signed.handler
    timeout: 600
    events:
      - s3:
          bucket: allocations-deal-documents-${opt:stage, 'dev'}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: subscription_agreements/

  # ------------------------------------------------ ONBOARDING FUNCTIONS ----------------------------------------------------------

  onboardingCheck:
    handler: service/onboarding/check.handler
    events:
      - sns:
          arn: ${redtail:service_topic}
          topicName: deals
          filterPolicy:
            event: [check]
            phase: [onboarding]

  inviteInvestorsTaskComplete:
    handler: service/onboarding/invite-investors-task-complete.handler
    events:
      - http:
          path: invite-investors-task-complete
          method: POST

  # ------------------------------------------------ CLOSING FUNCTIONS ----------------------------------------------------------

  closingCheck:
    handler: service/closing/check.handler
    events:
      - sns:
          arn: ${redtail:service_topic}
          topicName: deals
          filterPolicy:
            event: [check]
            phase: [closing]

  # ------------------------------------------------ POST-CLOSING FUNCTIONS ----------------------------------------------------------

  userAcknowledgedComplete:
    handler: service/post-closing/user-acknowledged-complete.handler
    events:
      - http:
          path: user-acknowledged-complete
          method: POST
